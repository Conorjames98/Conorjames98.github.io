<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Soft&amp;SysDev Blog</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Soft&amp;SysDev Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Jan 2025 22:46:51 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Virtual Enviroments (Python)</title>
      <link>http://localhost:1313/post/seventhhpost/</link>
      <pubDate>Sun, 05 Jan 2025 22:46:51 +0000</pubDate>
      <guid>http://localhost:1313/post/seventhhpost/</guid>
      <description>&lt;h1 id=&#34;how-to-start-a-virtual-enviroment-for-python-on-macwindows&#34;&gt;How to start a virtual enviroment for python on MAC/Windows&lt;/h1&gt;&#xA;&lt;p&gt;A simple but necessary feature of python to stop package conflicts with globbaly installed packages, I had used this feature to make sure when I was installing packages very specific to the project I was working on that I did not install them globablly and caused myself more issues.&lt;/p&gt;&#xA;&lt;h2 id=&#34;on-mac-os&#34;&gt;On Mac OS&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Make sure Python is correctly installed&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;On your favourite IDE open the terminal and type&lt;/p&gt;</description>
    </item>
    <item>
      <title>API Staus Check</title>
      <link>http://localhost:1313/post/sixthpost/</link>
      <pubDate>Sun, 05 Jan 2025 21:55:19 +0000</pubDate>
      <guid>http://localhost:1313/post/sixthpost/</guid>
      <description>&lt;h1 id=&#34;a-simple-application-to-check-the-staus--of-various-apis&#34;&gt;A simple application to check the staus  of various APIs&lt;/h1&gt;&#xA;&lt;p&gt;I have created a small application in python that allows the user to enter the url of the api endpoint to check the status of the API the application could be expanded on for POST requests to the api for the creation of long-life-tokens which would be needed for further interaction with the API.&lt;/p&gt;&#xA;&lt;p&gt;The code can be found here: &lt;a href=&#34;https://github.com/Conorjames98/API-Check&#34;&gt;https://github.com/Conorjames98/API-Check&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Time formatting (Python)</title>
      <link>http://localhost:1313/post/fifthpost/</link>
      <pubDate>Sun, 05 Jan 2025 21:23:30 +0000</pubDate>
      <guid>http://localhost:1313/post/fifthpost/</guid>
      <description>&lt;h1 id=&#34;formatting-time-in-python&#34;&gt;formatting time in python&lt;/h1&gt;&#xA;&lt;p&gt;Here I simply learnt how to the ge the systems current time format it and display it using the libary&lt;/p&gt;&#xA;&lt;p&gt;-datetime-&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# import the datetime module&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# we assign datetime.now() to the variable current_time&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;current_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;now()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# we print the current time using the strftime() method&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The current time is:&amp;#34;&lt;/span&gt;, current_time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# We use strftime to format time so it is human readable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;strftime(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%H:%M:%S&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;in the module datetime we use strftime which stands for (String Format Time)&lt;/p&gt;</description>
    </item>
    <item>
      <title>A discord bot</title>
      <link>http://localhost:1313/post/fourthpost/</link>
      <pubDate>Sat, 04 Jan 2025 01:57:11 +0000</pubDate>
      <guid>http://localhost:1313/post/fourthpost/</guid>
      <description>&lt;h1 id=&#34;discord-bot&#34;&gt;Discord bot&lt;/h1&gt;&#xA;&lt;p&gt;I began working on a small discord bot to understand how it works in python, like many things in python to make life easier we have things like libaries in this case it is the discord.py libary which allows us to interact with discord in ways that aren&amp;rsquo;t as complex as they would be without it. these shothands such as &amp;ldquo;@bot.command&amp;rdquo; are called a decorator.&lt;/p&gt;&#xA;&lt;p&gt;Some things I learnt along the way&lt;/p&gt;</description>
    </item>
    <item>
      <title>Traffic prediction</title>
      <link>http://localhost:1313/post/thirdpost/</link>
      <pubDate>Mon, 16 Dec 2024 12:41:31 +0000</pubDate>
      <guid>http://localhost:1313/post/thirdpost/</guid>
      <description>&lt;h1 id=&#34;a-traffic-prediction-program&#34;&gt;A Traffic prediction program&lt;/h1&gt;&#xA;&lt;p&gt;This application was made to simply predict&#xA;the flow fo traffic at three different&#xA;checkpoints by using an aritmetic sequence&#xA;to calculate the nth term of sequence.&lt;/p&gt;&#xA;&lt;p&gt;The program starts with an inital starting point for each checkpoint&#xA;and an inital increase for each checkpoint representing the common difference&#xA;and the first term of the sequence.&lt;/p&gt;&#xA;&lt;p&gt;The program also asks the user which checkpoint they would like to checkpoint to check and then uses&#xA;the formula a1 + (n - 1) * d to calculate the sequence at that checkpoint.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A blog with hugo</title>
      <link>http://localhost:1313/post/secondpost/</link>
      <pubDate>Fri, 22 Nov 2024 00:27:57 +0000</pubDate>
      <guid>http://localhost:1313/post/secondpost/</guid>
      <description>&lt;h1 id=&#34;making-a-blog-with-hugo-and-github-pages&#34;&gt;Making a blog with Hugo and Github pages.&lt;/h1&gt;&#xA;&lt;p&gt;Firstly Hugo need&amp;rsquo;s to be installed depending on the OS you&amp;rsquo;re running&lt;/p&gt;&#xA;&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;&#xA;&lt;p&gt;Refer to: &lt;a href=&#34;https://gohugo.io/installation/windows/&#34;&gt;https://gohugo.io/installation/windows/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;This tutorial will guide you through the installation on Windows&lt;/p&gt;&#xA;&lt;h3 id=&#34;mac&#34;&gt;Mac&lt;/h3&gt;&#xA;&lt;p&gt;Refer to: &lt;a href=&#34;https://gohugo.io/installation/macos/&#34;&gt;https://gohugo.io/installation/macos/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;This tutorial will guide you through the installation on Mac&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-a-hugo-site&#34;&gt;Creating a hugo site&lt;/h2&gt;&#xA;&lt;p&gt;Open a terminal and use:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site quickstart&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd quickstart&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;Your submodule&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; hugo.toml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;------------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-to-add-new-content-to-your-new-site&#34;&gt;How to add new content to your new site&lt;/h2&gt;&#xA;&lt;p&gt;Hugo new content content/posts/my-first-post.md&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nested loops</title>
      <link>http://localhost:1313/post/firstpost/</link>
      <pubDate>Tue, 19 Nov 2024 01:06:26 +0000</pubDate>
      <guid>http://localhost:1313/post/firstpost/</guid>
      <description>&lt;h1 id=&#34;nested-loops-and-creating-grids&#34;&gt;Nested loops and creating grids!&lt;/h1&gt;&#xA;&lt;p&gt;In this example, the outer loop handles the rows, and the inner loop controls the columns. For each row, the inner loop prints the cells, and after each row, a divider is printed to separate the grid.&lt;/p&gt;&#xA;&lt;p&gt;Here’s a simple example in C++:&lt;/p&gt;&#xA;&lt;p&gt;Here’s an example of a nested loop in C++ used to create a simple grid:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; gridSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// This is a nested loop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// This is the outer loop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; gridSize; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// This is the inner loop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; gridSize; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  |&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; gridSize &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-----+-----&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;---------------------------------------------------------&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-it-works&#34;&gt;How It Works:&lt;/h2&gt;&#xA;&lt;p&gt;The outer loop (i) iterates over the rows.&#xA;The inner loop (j) iterates over the columns.&#xA;After each row, a divider is printed (except after the last row).&#xA;This approach can be easily adjusted for larger grids or different layouts.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
